echo "Welcom to nestjs hexagonal boilerplate generator"
read -p "Enter folder name: " folder_name

if [[ -z "${folder_name}" || "${folder_name}" =~ [^a-zA-Z-] ]]; then
    echo "Only not empty strings and hyphens are allowed"
    exit
fi

echo "Folder name: ${folder_name}"

default_path="./src/apis/${folder_name}"

echo ${default_path}

class_prefix=$(echo ${folder_name} | awk -F'-' '{for (i=1; i<=NF; i++) $i=toupper(substr($i,1,1)) substr($i,2)}1' OFS="")

method_prefix=$(echo ${class_prefix} | awk '{print tolower(substr($0,1,1)) substr($0,2)}')

echo "Class prefix: ${class_prefix}"

echo "Method prefix: ${method_prefix}"

# ================= Generate Port =================
echo "Generate example in-out port"
mkdir -p ${default_path}/application/port/{in,out}
example_in_port="${default_path}/application/port/in/${folder_name}.usecase.ts"
cat <<EOF > ${example_in_port}
// $example_in_port
// This file is generated by a shell script.
export abstract class i${class_prefix}UseCase {}
EOF

example_out_port="${default_path}/application/port/out/${folder_name}.repository.port.ts"
cat <<EOF > ${example_out_port}
// $example_out_port
// This file is generated by a shell script.
export abstract class i${class_prefix}RepositoryPort {}
EOF

# ================= Generate Adaptor =================
echo "Generate example in-out adaptor"
mkdir -p ${default_path}/adaptor/{in,out}
example_in_adaptor="${default_path}/adaptor/in/${folder_name}.controller.ts"
cat <<EOF > ${example_in_adaptor}
// $example_in_adaptor
// This file is generated by a shell script.
import { Controller } from '@nestjs/common';
import { i${class_prefix}UseCase } from '../../application/port/in/${folder_name}.usecase'

@Controller('/${folder_name}')
export class ${class_prefix}Controller {
    constructor(
        private readonly ${method_prefix}Service: i${class_prefix}UseCase,
    ) {}
}
EOF

example_out_adaptor="${default_path}/adaptor/out/${folder_name}.repository.ts"
cat <<EOF > ${example_out_adaptor}
// $example_out_adaptor
// This file is generated by a shell script.
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { i${class_prefix}RepositoryPort } from '../../application/port/out/${folder_name}.repository.port';

@Injectable()
export class ${class_prefix}Repository implements i${class_prefix}RepositoryPort {
    constructor(
        @InjectRepository(ExampleEntity)
        private readonly exampleRepository: Repository<ExampleEntity>
    ) {}
}
EOF

# ================= Generate Application Service ================= 
echo "Generate example application service"
mkdir -p ${default_path}/application/service
example_application_service="${default_path}/application/service/${folder_name}.application.service.ts"
cat<<EOF > ${example_application_service}
// $example_application_service
// This file is generated by a shell script.
import { Injectable } from '@nestjs/common';
import { i${class_prefix}UseCase } from '../port/in/${folder_name}.usecase';
import { i${class_prefix}RepositoryPort } from '../port/out/${folder_name}.repository.port';
import { ${class_prefix}DomainService } from '../../domain/service/${folder_name}.domain.service';

@Injectable()
export class ${class_prefix}ApplicationService implements i${class_prefix}UseCase {
    constructor(
        private readonly ${method_prefix}Repository: i${class_prefix}RepositoryPort,
        private readonly ${method_prefix}DomainService: ${class_prefix}DomainService, 
    ) {}
}
EOF

# ================= Generate Domain Service ================= 
echo "Generate example domain service"
mkdir -p ${default_path}/domain/service
example_domain_service="${default_path}/domain/service/${folder_name}.domain.service.ts"
cat <<EOF > ${example_domain_service}
// $example_domain_service
// This file is generated by a shell script.

export class ${class_prefix}DomainService {
    exampleDomainServiceFunc() {
        return 'exampleDomainServiceFunc';
    }
}
EOF

# ================= Generate Module ================= 
echo "Generate example module"
example_module="${default_path}/${folder_name}.module.ts"
cat <<EOF > ${example_module}
// $example_module
// This file is generated by a shell script.
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { i${class_prefix}RepositoryPort } from './application/port/out/${folder_name}.repository.port';
import { ${class_prefix}Repository } from './adaptor/out/${folder_name}.repository';
import { i${class_prefix}UseCase } from './application/port/in/${folder_name}.usecase';
import { ${class_prefix}ApplicationService } from './application/service/${folder_name}.application.service';
import { ${class_prefix}DomainService } from './domain/service/${folder_name}.domain.service';
import { ${class_prefix}Controller } from './adaptor/in/${folder_name}.controller';

@Module({
    imports: [
        TypeOrmModule.forFeature([ExampleEntity]),
    ],
    controllers: [
        ${class_prefix}Controller,
    ],
    providers: [
        { provide: i${class_prefix}RepositoryPort, useClass: ${class_prefix}Repository },
        { provide: i${class_prefix}UseCase, useClass: ${class_prefix}ApplicationService },
        { provide: ${class_prefix}DomainService, useClass: ${class_prefix}DomainService },
    ]
})
export class ${class_prefix}Module {}
EOF

npx eslint --fix ${default_path}